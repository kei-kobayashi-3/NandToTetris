// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    //i=0の場合はinstructionを入力する。i=1の場合はoutMを入力する（しかしAでは読み込まない）。
    Mux16(a=instruction[0..15], b=outALU1, sel=instruction[15], out=outM1);

    //A: {i,d1}={0,0}->true, {0,1}->true, {1,0}->false, {1,1}->true
    Mux(a=true, b=false, sel=instruction[15], out=outm2);
    Mux(a=outm2, b=true, sel=instruction[5], out=outm3);
    ARegister(in=outM1, load=outm3, out=outA1);

    //{a}={0}->A, {a}={1}->M  (i=0の場合は考えていない)
    Mux16(a=outA1, b=inM, sel=instruction[12], out=outM2);

    //ALU: c1〜c6を読み込む。
    ALU(x=outD1, y=outM2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU1, zr=outIsZero, ng=OutNegitive);
    Or16(a=outALU1, b=false, out=outM);

    //D: {i,d2}={0,0}->false, {0,1}->false, {1,0}->false, {1,1}->true
    Mux(a=false, b=true, sel=instruction[15], out=outm4);
    Mux(a=false, b=outm4, sel=instruction[4], out=outm5);
    DRegister(in=outALU1, load=outm5, out=outD1);

    //writeM: {i,d3}={0,0}->false, {0,1}->false, {1,0}->false, {1,1}->true
    Mux(a=false, b=outm4, sel=instruction[3], out=writeM);

    //addressM:
    Or16(a=false, b=outA1, out[0..14]=addressM);

    //PC {j1&ng, j2&zr, j3&(ng&zr==0)   &instruction[15]==1}
    And(a=instruction[2], b=OutNegitive, out=outng);
    And(a=instruction[1], b=outIsZero, out=outzr);

    Or(a=OutNegitive, b=outIsZero, out=outboth);
    Not(in=outboth, out=outboth2);
    And(a=instruction[0], b=outboth2, out=outboth3);

    Or(a=outng, b=outzr, out=outngzr);
    Or(a=outngzr, b=outboth3, out=loadfront);

    And(a=loadfront, b=instruction[15], out=load);

    PC(in=outA1, load=load, inc=true, reset=reset, out[0..14]=pc);
}
